on: push

jobs:
  externals-dir:
    runs-on: dennis-windows-arm64
    steps:
      - name: list env variables and externals
        run: |
          Get-ChildItem -Path Env:
          Write-Host "Workspace path: $env:GITHUB_WORKSPACE"
          Write-Host "Temp path: $env:RUNNER_TEMP"
          Write-Host "Tool cache path: $env:RUNNER_TOOL_CACHE"
          Get-ChildItem -Path C:\a\externals -Recurse | Select-String -Pattern 'git'
          Get-ChildItem -Path C:\a\externals -Recurse
  missing-git-executable:
    runs-on: dennis-windows-arm64
    steps:
      # This will use the GitHub API since Git isn't installed on the runner
      - name: clone git-for-windows-automation
        uses: actions/checkout@v4
      # This will fail because Git isn't installed on the runner
      - uses: dscho/setup-git-for-windows-sdk@fix-on-arm64
        continue-on-error: true
        with:
          flavor: build-installers
          architecture: aarch64
          cache: false
      - name: install GfW
        shell: powershell
        run: |
          & ./azure-self-hosted-runners/post-deployment-script.ps1
          Add-Content $env:GITHUB_PATH "C:\Program Files\Git\bin"
          $currentPath = [System.Environment]::GetEnvironmentVariable("PATH", "Machine")
          $newPath = 'C:\Program Files\Git\bin;' + $currentPath
          [Environment]::SetEnvironmentVariable("PATH", $newPath, "Machine")
      - name: try installing the SDK again
        uses: dscho/setup-git-for-windows-sdk@fix-on-arm64
        with:
          flavor: build-installers
          architecture: aarch64
          cache: false
  should-work-on-hosted-runner:
    runs-on: windows-latest
    steps:
      # This should work because the hosted runner has Git installed. Let's see what it logs as its PATH.
      - uses: dscho/setup-git-for-windows-sdk@fix-on-arm64
        continue-on-error: true
        with:
          flavor: build-installers
          architecture: aarch64
          cache: false
